#!/bin/tclsh

package require Expect

# exp_internal 1
log_user 0
set timeout -1


proc defined_or_default {varname def} {
    upvar $varname var
    if {![info exists var]} {
        set var $def
    }
}

proc die {msg} {
    puts stderr $msg
    exit 1
}

set config $::env(HOME)/.config/keepassxc-dmenu/config
if {[file exists $config]} {
    source $config
} else {
    die "Provide config file at $config"
}

if {![info exists kpxc_database_path]} {
    die {Variable $kpxc_database_path must be defined}
} elseif {![file exists $kpxc_database_path]} {
    die "Database file not found at $kpxc_database_path"
}


defined_or_default kpxc_dmenu {rofi -dmenu -i}
defined_or_default kpxc_pinentry /usr/bin/pinentry-qt

set kpxc_appdir /tmp/keepassxc-dmenu/
file mkdir $kpxc_appdir
exec chmod 700 $kpxc_appdir
cd $kpxc_appdir


proc pinentry_get {} {
    spawn "$::kpxc_pinentry"
    expect "OK"
    send -- "SETDESC Enter Password for $::kpxc_database_path:\r"
    expect "OK"
    send -- "GETPIN\r"
    expect {
        "OK" { regexp -line {D (.*)\r} $expect_out(buffer) line pw }
        "cancelled" { die "User didn't input password, exiting." }
    }
    send -- "BYE\r"
    wait
    return $pw
}

proc enter_pw {kpxc_pw} {
    spawn keepassxc-cli open "$::kpxc_database_path"
    expect "Enter password"
    send -- "$kpxc_pw\r"
    expect "> "
    if {[regexp {Invalid credentials} $expect_out(buffer) match]} {
        die "Wrong Password"
    }
         
    send -- "ls -R -f\r"
    expect "> "

    set kpxc_accounts {}
    foreach line [lrange [split $expect_out(buffer) "\n"] 1 end] {
        set item [string trim $line]
        if {($item eq "") || ([string index $item end] in {">" "/"})} {
            continue
        }
        lappend kpxc_accounts $item
    }

    set window [exec xdotool getactivewindow]
    if {[catch {exec {*}$::kpxc_dmenu << [join $kpxc_accounts "\n"]} result] == 0} {
        send -- "show -s \"$result\"\r"
        expect "> "
        regexp -line {^Password: (.*)\r} $expect_out(buffer) line kpxc_entry_pw

        exec {*}{xdotool -} << "
             windowactivate --sync $window
             type --clearmodifiers -- $kpxc_entry_pw
        "        
    }
    
    unset kpxc_accounts
    send -- "quit\r"
    wait
}

proc readpipe {} {
    if {[gets $::pipe line] > 0} {
        if {![string eq $line exit]} {
            run $::kpxc_pw
        } else {
            cleanup
        }
    }
}

proc cleanup {} {
    try {
        close $::pipe
    } finally {
        file delete -force -- $::kpxc_appdir
        exit 1
    }
}

proc run {kpxc_pw} {
    try {
        enter_pw $kpxc_pw
    } on error {result option} {
        puts stderr $result
    }
}


### GET PASSWORD
set kpxc_pw [pinentry_get]
enter_pw $kpxc_pw


### Go into background and listen on the FIFO
if {[fork] != 0} {
    exit
}

disconnect
trap {cleanup} {SIGTERM SIGINT}

set kpxc_pipe run
exec mkfifo $kpxc_pipe

set pipe [open "$kpxc_pipe" {RDWR NONBLOCK}]
fileevent $pipe readable readpipe

if {[info exists kpxc_timeout]} {
    set ::state waiting
    after [expr {60000 * $kpxc_timeout}] {set ::state timeout}
    vwait ::state
    cleanup
} else {
    vwait forever
}
